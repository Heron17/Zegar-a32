
zegar a32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000b4a  00000bde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800094  00800094  00000c12  2**0
                  ALLOC
  3 .stab         00002778  00000000  00000000  00000c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b0b  00000000  00000000  0000338c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003e97  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c0  00000000  00000000  00003ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000d77  00000000  00000000  00003f86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003c8  00000000  00000000  00004cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005ac  00000000  00000000  000050c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001ec  00000000  00000000  00005674  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002b3  00000000  00000000  00005860  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000956  00000000  00000000  00005b13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  00006469  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
  8a:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_lcd_read_byte>:
//		 Ustawienie wszystkich 4 linii danych jako WEjœcia
//
//----------------------------------------------------------------------------------------
static inline void data_dir_in(void)
{
	DDR(LCD_D7PORT)	&= ~(1<<LCD_D7);
  92:	8b 98       	cbi	0x11, 3	; 17
	DDR(LCD_D6PORT)	&= ~(1<<LCD_D6);
  94:	8a 98       	cbi	0x11, 2	; 17
	DDR(LCD_D5PORT)	&= ~(1<<LCD_D5);
  96:	d4 98       	cbi	0x1a, 4	; 26
	DDR(LCD_D4PORT)	&= ~(1<<LCD_D4);
  98:	d3 98       	cbi	0x1a, 3	; 26
uint8_t _lcd_read_byte(void)
{
	uint8_t result=0;
	data_dir_in();

	SET_RW;
  9a:	d9 9a       	sbi	0x1b, 1	; 27

	SET_E;
  9c:	da 9a       	sbi	0x1b, 2	; 27
//----------------------------------------------------------------------------------------
static inline uint8_t lcd_readHalf(void)
{
	uint8_t result=0;

	if(PIN(LCD_D4PORT)&(1<<LCD_D4)) result |= (1<<0);
  9e:	89 b3       	in	r24, 0x19	; 25
  a0:	83 fb       	bst	r24, 3
  a2:	88 27       	eor	r24, r24
  a4:	80 f9       	bld	r24, 0
	if(PIN(LCD_D5PORT)&(1<<LCD_D5)) result |= (1<<1);
  a6:	cc 99       	sbic	0x19, 4	; 25
  a8:	82 60       	ori	r24, 0x02	; 2
	if(PIN(LCD_D6PORT)&(1<<LCD_D6)) result |= (1<<2);
  aa:	82 99       	sbic	0x10, 2	; 16
  ac:	84 60       	ori	r24, 0x04	; 4
	if(PIN(LCD_D7PORT)&(1<<LCD_D7)) result |= (1<<3);
  ae:	83 99       	sbic	0x10, 3	; 16
  b0:	88 60       	ori	r24, 0x08	; 8
	data_dir_in();

	SET_RW;

	SET_E;
	result = (lcd_readHalf() << 4);	// odczyt starszej czêœci bajtu z LCD D7..D4
  b2:	82 95       	swap	r24
  b4:	80 7f       	andi	r24, 0xF0	; 240
	CLR_E;
  b6:	da 98       	cbi	0x1b, 2	; 27

	SET_E;
  b8:	da 9a       	sbi	0x1b, 2	; 27
//----------------------------------------------------------------------------------------
static inline uint8_t lcd_readHalf(void)
{
	uint8_t result=0;

	if(PIN(LCD_D4PORT)&(1<<LCD_D4)) result |= (1<<0);
  ba:	99 b3       	in	r25, 0x19	; 25
  bc:	93 fb       	bst	r25, 3
  be:	99 27       	eor	r25, r25
  c0:	90 f9       	bld	r25, 0
	if(PIN(LCD_D5PORT)&(1<<LCD_D5)) result |= (1<<1);
  c2:	cc 99       	sbic	0x19, 4	; 25
  c4:	92 60       	ori	r25, 0x02	; 2
	if(PIN(LCD_D6PORT)&(1<<LCD_D6)) result |= (1<<2);
  c6:	82 99       	sbic	0x10, 2	; 16
  c8:	94 60       	ori	r25, 0x04	; 4
	if(PIN(LCD_D7PORT)&(1<<LCD_D7)) result |= (1<<3);
  ca:	83 99       	sbic	0x10, 3	; 16
  cc:	98 60       	ori	r25, 0x08	; 8
	result = (lcd_readHalf() << 4);	// odczyt starszej czêœci bajtu z LCD D7..D4
	CLR_E;

	SET_E;
	result |= lcd_readHalf();			// odczyt m³odszej czêœci bajtu z LCD D3..D0
	CLR_E;
  ce:	da 98       	cbi	0x1b, 2	; 27

	return result;
}
  d0:	89 2b       	or	r24, r25
  d2:	08 95       	ret

000000d4 <check_BF>:
//		 Sprawdzenie stanu Busy Flag (Zajêtoœci wyœwietlacza)
//
//----------------------------------------------------------------------------------------
uint8_t check_BF(void)
{
	CLR_RS;
  d4:	d8 98       	cbi	0x1b, 0	; 27
	return _lcd_read_byte();
  d6:	0e 94 49 00 	call	0x92	; 0x92 <_lcd_read_byte>
}
  da:	08 95       	ret

000000dc <_lcd_write_byte>:
//		 Ustawienie wszystkich 4 linii danych jako WYjœcia
//
//----------------------------------------------------------------------------------------
static inline void data_dir_out(void)
{
	DDR(LCD_D7PORT)	|= (1<<LCD_D7);
  dc:	8b 9a       	sbi	0x11, 3	; 17
	DDR(LCD_D6PORT)	|= (1<<LCD_D6);
  de:	8a 9a       	sbi	0x11, 2	; 17
	DDR(LCD_D5PORT)	|= (1<<LCD_D5);
  e0:	d4 9a       	sbi	0x1a, 4	; 26
	DDR(LCD_D4PORT)	|= (1<<LCD_D4);
  e2:	d3 9a       	sbi	0x1a, 3	; 26
{
	// Ustawienie pinów portu LCD D4..D7 jako wyjœcia
	data_dir_out();

#if USE_RW == 1
	CLR_RW;
  e4:	d9 98       	cbi	0x1b, 1	; 27
#endif

	SET_E;
  e6:	da 9a       	sbi	0x1b, 2	; 27
	lcd_sendHalf(_data >> 4);			// wys³anie starszej czêœci bajtu danych D7..D4
  e8:	98 2f       	mov	r25, r24
  ea:	92 95       	swap	r25
  ec:	9f 70       	andi	r25, 0x0F	; 15
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
  ee:	90 ff       	sbrs	r25, 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <_lcd_write_byte+0x1a>
  f2:	db 9a       	sbi	0x1b, 3	; 27
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <_lcd_write_byte+0x1c>
  f6:	db 98       	cbi	0x1b, 3	; 27
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
  f8:	91 ff       	sbrs	r25, 1
  fa:	02 c0       	rjmp	.+4      	; 0x100 <_lcd_write_byte+0x24>
  fc:	dc 9a       	sbi	0x1b, 4	; 27
  fe:	01 c0       	rjmp	.+2      	; 0x102 <_lcd_write_byte+0x26>
 100:	dc 98       	cbi	0x1b, 4	; 27
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
 102:	92 ff       	sbrs	r25, 2
 104:	02 c0       	rjmp	.+4      	; 0x10a <_lcd_write_byte+0x2e>
 106:	92 9a       	sbi	0x12, 2	; 18
 108:	01 c0       	rjmp	.+2      	; 0x10c <_lcd_write_byte+0x30>
 10a:	92 98       	cbi	0x12, 2	; 18
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
 10c:	98 70       	andi	r25, 0x08	; 8
 10e:	11 f0       	breq	.+4      	; 0x114 <_lcd_write_byte+0x38>
 110:	93 9a       	sbi	0x12, 3	; 18
 112:	01 c0       	rjmp	.+2      	; 0x116 <_lcd_write_byte+0x3a>
 114:	93 98       	cbi	0x12, 3	; 18
	CLR_RW;
#endif

	SET_E;
	lcd_sendHalf(_data >> 4);			// wys³anie starszej czêœci bajtu danych D7..D4
	CLR_E;
 116:	da 98       	cbi	0x1b, 2	; 27

	SET_E;
 118:	da 9a       	sbi	0x1b, 2	; 27
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
 11a:	80 ff       	sbrs	r24, 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <_lcd_write_byte+0x46>
 11e:	db 9a       	sbi	0x1b, 3	; 27
 120:	01 c0       	rjmp	.+2      	; 0x124 <_lcd_write_byte+0x48>
 122:	db 98       	cbi	0x1b, 3	; 27
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
 124:	81 ff       	sbrs	r24, 1
 126:	02 c0       	rjmp	.+4      	; 0x12c <_lcd_write_byte+0x50>
 128:	dc 9a       	sbi	0x1b, 4	; 27
 12a:	01 c0       	rjmp	.+2      	; 0x12e <_lcd_write_byte+0x52>
 12c:	dc 98       	cbi	0x1b, 4	; 27
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
 12e:	82 ff       	sbrs	r24, 2
 130:	02 c0       	rjmp	.+4      	; 0x136 <_lcd_write_byte+0x5a>
 132:	92 9a       	sbi	0x12, 2	; 18
 134:	01 c0       	rjmp	.+2      	; 0x138 <_lcd_write_byte+0x5c>
 136:	92 98       	cbi	0x12, 2	; 18
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
 138:	83 ff       	sbrs	r24, 3
 13a:	02 c0       	rjmp	.+4      	; 0x140 <_lcd_write_byte+0x64>
 13c:	93 9a       	sbi	0x12, 3	; 18
 13e:	01 c0       	rjmp	.+2      	; 0x142 <_lcd_write_byte+0x66>
 140:	93 98       	cbi	0x12, 3	; 18
	lcd_sendHalf(_data >> 4);			// wys³anie starszej czêœci bajtu danych D7..D4
	CLR_E;

	SET_E;
	lcd_sendHalf(_data);				// wys³anie m³odszej czêœci bajtu danych D3..D0
	CLR_E;
 142:	da 98       	cbi	0x1b, 2	; 27

#if USE_RW == 1
	while( (check_BF() & (1<<7)) );
 144:	0e 94 6a 00 	call	0xd4	; 0xd4 <check_BF>
 148:	88 23       	and	r24, r24
 14a:	e4 f3       	brlt	.-8      	; 0x144 <_lcd_write_byte+0x68>
#else
	_delay_us(120);
#endif

}
 14c:	08 95       	ret

0000014e <lcd_write_cmd>:
//		 Zapis komendy do wyœwietlacza LCD
//
//----------------------------------------------------------------------------------------
void lcd_write_cmd(uint8_t cmd)
{
	CLR_RS;
 14e:	d8 98       	cbi	0x1b, 0	; 27
	_lcd_write_byte(cmd);
 150:	0e 94 6e 00 	call	0xdc	; 0xdc <_lcd_write_byte>
 154:	08 95       	ret

00000156 <lcd_write_data>:
//		 Zapis danych do wyœwietlacza LCD
//
//----------------------------------------------------------------------------------------
void lcd_write_data(uint8_t data)
{
	SET_RS;
 156:	d8 9a       	sbi	0x1b, 0	; 27
	_lcd_write_byte(data);
 158:	0e 94 6e 00 	call	0xdc	; 0xdc <_lcd_write_byte>
 15c:	08 95       	ret

0000015e <lcd_locate>:
//		w zale¿noœci od rodzaju wyœwietlacza (ile posiada wierszy)
//
//----------------------------------------------------------------------------------------
void lcd_locate(int8_t y, int8_t x) //zmiana 4 uint
{
	lcd_y = y; lcd_x = x;//zmiana 5
 15e:	80 93 95 00 	sts	0x0095, r24
 162:	60 93 94 00 	sts	0x0094, r22
	if (lcd_y<0 || lcd_y >LCD_ROWS-1 || lcd_x<0 || lcd_x>LCD_COLS-1) return;
 166:	84 30       	cpi	r24, 0x04	; 4
 168:	98 f4       	brcc	.+38     	; 0x190 <lcd_locate+0x32>
 16a:	66 23       	and	r22, r22
 16c:	8c f0       	brlt	.+34     	; 0x190 <lcd_locate+0x32>
 16e:	60 31       	cpi	r22, 0x10	; 16
 170:	7c f4       	brge	.+30     	; 0x190 <lcd_locate+0x32>
	
		
	switch(y)
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	31 f0       	breq	.+12     	; 0x182 <lcd_locate+0x24>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	31 f0       	breq	.+12     	; 0x186 <lcd_locate+0x28>
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	29 f4       	brne	.+10     	; 0x188 <lcd_locate+0x2a>
	{
		case 0: y = LCD_LINE1; break;

#if (LCD_ROWS>1)
	    case 1: y = LCD_LINE2; break; // adres 1 znaku 2 wiersza
 17e:	88 e2       	ldi	r24, 0x28	; 40
 180:	03 c0       	rjmp	.+6      	; 0x188 <lcd_locate+0x2a>
#endif
#if (LCD_ROWS>2)
    	case 2: y = LCD_LINE3; break; // adres 1 znaku 3 wiersza
 182:	80 e1       	ldi	r24, 0x10	; 16
 184:	01 c0       	rjmp	.+2      	; 0x188 <lcd_locate+0x2a>
#endif
#if (LCD_ROWS>3)
    	case 3: y = LCD_LINE4; break; // adres 1 znaku 4 wiersza
 186:	80 e5       	ldi	r24, 0x50	; 80
#endif
	}

	lcd_write_cmd( (0x80 + y + x) );
 188:	60 58       	subi	r22, 0x80	; 128
 18a:	86 0f       	add	r24, r22
 18c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_write_cmd>
 190:	08 95       	ret

00000192 <lcd_char>:
//		 8 w³asnych znaków zdefiniowanych w CGRAM
//		 wysy³amy za pomoc¹ kodów 0x80 do 0x87 zamiast 0x00 do 0x07
//
//----------------------------------------------------------------------------------------
void lcd_char(char c)
{
 192:	cf 93       	push	r28
 194:	c8 2f       	mov	r28, r24
	if (lcd_y>=0 && lcd_y<LCD_ROWS && lcd_x>=0 && lcd_x<LCD_COLS) //zmiana 6
 196:	80 91 95 00 	lds	r24, 0x0095
 19a:	84 30       	cpi	r24, 0x04	; 4
 19c:	80 f4       	brcc	.+32     	; 0x1be <lcd_char+0x2c>
 19e:	60 91 94 00 	lds	r22, 0x0094
 1a2:	66 23       	and	r22, r22
 1a4:	64 f0       	brlt	.+24     	; 0x1be <lcd_char+0x2c>
 1a6:	60 31       	cpi	r22, 0x10	; 16
 1a8:	54 f4       	brge	.+20     	; 0x1be <lcd_char+0x2c>
	{
		lcd_locate(lcd_y,lcd_x);
 1aa:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_locate>
		lcd_write_data( ( c>=0x80 && c<=0x87 ) ? (c & 0x07) : c);
 1ae:	8c 2f       	mov	r24, r28
 1b0:	80 58       	subi	r24, 0x80	; 128
 1b2:	88 30       	cpi	r24, 0x08	; 8
 1b4:	08 f4       	brcc	.+2      	; 0x1b8 <lcd_char+0x26>
 1b6:	c7 70       	andi	r28, 0x07	; 7
 1b8:	8c 2f       	mov	r24, r28
 1ba:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_write_data>
	}
	lcd_x++;
 1be:	80 91 94 00 	lds	r24, 0x0094
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 94 00 	sts	0x0094, r24
}
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <lcd_str>:
//		 Wys³anie stringa do wyœwietlacza LCD z pamiêci RAM
//
//
//----------------------------------------------------------------------------------------
void lcd_str(char * str)
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
	register char znak;
	while ( (znak=*(str++)) ) lcd_char( znak );
 1d0:	ec 01       	movw	r28, r24
 1d2:	89 91       	ld	r24, Y+
 1d4:	88 23       	and	r24, r24
 1d6:	29 f0       	breq	.+10     	; 0x1e2 <lcd_str+0x16>
 1d8:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_char>
 1dc:	89 91       	ld	r24, Y+
 1de:	81 11       	cpse	r24, r1
 1e0:	fb cf       	rjmp	.-10     	; 0x1d8 <lcd_str+0xc>
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <lcd_int>:
//
//		 Wyœwietla liczbê dziesiêtn¹ na wyœwietlaczu LCD
//
//----------------------------------------------------------------------------------------
void lcd_int(int val)
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	61 97       	sbiw	r28, 0x11	; 17
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
	char bufor[17];
	lcd_str( itoa(val, bufor, 10) );
 1fc:	4a e0       	ldi	r20, 0x0A	; 10
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	be 01       	movw	r22, r28
 202:	6f 5f       	subi	r22, 0xFF	; 255
 204:	7f 4f       	sbci	r23, 0xFF	; 255
 206:	0e 94 5e 05 	call	0xabc	; 0xabc <itoa>
 20a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_str>
}
 20e:	61 96       	adiw	r28, 0x11	; 17
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <lcd_cls>:
//		Kasowanie ekranu wyœwietlacza
//
//----------------------------------------------------------------------------------------
void lcd_cls(void)
{
	lcd_y=0; lcd_x=0; //zmiana 2
 220:	10 92 95 00 	sts	0x0095, r1
 224:	10 92 94 00 	sts	0x0094, r1
	lcd_write_cmd( LCDC_CLS );
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_write_cmd>
 22e:	08 95       	ret

00000230 <lcd_init>:
//		 Ustawienie wszystkich 4 linii danych jako WYjœcia
//
//----------------------------------------------------------------------------------------
static inline void data_dir_out(void)
{
	DDR(LCD_D7PORT)	|= (1<<LCD_D7);
 230:	8b 9a       	sbi	0x11, 3	; 17
	DDR(LCD_D6PORT)	|= (1<<LCD_D6);
 232:	8a 9a       	sbi	0x11, 2	; 17
	DDR(LCD_D5PORT)	|= (1<<LCD_D5);
 234:	d4 9a       	sbi	0x1a, 4	; 26
	DDR(LCD_D4PORT)	|= (1<<LCD_D4);
 236:	d3 9a       	sbi	0x1a, 3	; 26
void lcd_init(void)
{
	// inicjowanie pinów portów ustalonych do pod³¹czenia z wyœwietlaczem LCD
	// ustawienie wszystkich jako wyjœcia
	data_dir_out();
	DDR(LCD_RSPORT) |= (1<<LCD_RS);
 238:	d0 9a       	sbi	0x1a, 0	; 26
	DDR(LCD_EPORT) |= (1<<LCD_E);
 23a:	d2 9a       	sbi	0x1a, 2	; 26
	#if USE_RW == 1
		DDR(LCD_RWPORT) |= (1<<LCD_RW);
 23c:	d1 9a       	sbi	0x1a, 1	; 26
	#endif

	PORT(LCD_RSPORT) |= (1<<LCD_RS);
 23e:	d8 9a       	sbi	0x1b, 0	; 27
	PORT(LCD_EPORT) |= (1<<LCD_E);
 240:	da 9a       	sbi	0x1b, 2	; 27
	#if USE_RW == 1
		PORT(LCD_RWPORT) |= (1<<LCD_RW);
 242:	d9 9a       	sbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	85 ea       	ldi	r24, 0xA5	; 165
 246:	9e e0       	ldi	r25, 0x0E	; 14
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_init+0x18>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <lcd_init+0x1e>
 24e:	00 00       	nop
	#endif

	_delay_ms(15);
	PORT(LCD_EPORT) &= ~(1<<LCD_E);
 250:	da 98       	cbi	0x1b, 2	; 27
	PORT(LCD_RSPORT) &= ~(1<<LCD_RS);
 252:	d8 98       	cbi	0x1b, 0	; 27
	#if USE_RW == 1	
    	PORT(LCD_RWPORT) &= ~(1<<LCD_RW);
 254:	d9 98       	cbi	0x1b, 1	; 27
	#endif

	// jeszcze nie mo¿na u¿ywaæ Busy Flag
	SET_E;
 256:	da 9a       	sbi	0x1b, 2	; 27
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
 258:	db 9a       	sbi	0x1b, 3	; 27
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
 25a:	dc 9a       	sbi	0x1b, 4	; 27
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
 25c:	92 98       	cbi	0x12, 2	; 18
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
 25e:	93 98       	cbi	0x12, 3	; 18
	#endif

	// jeszcze nie mo¿na u¿ywaæ Busy Flag
	SET_E;
	lcd_sendHalf(0x03);	// tryb 8-bitowy
	CLR_E;
 260:	da 98       	cbi	0x1b, 2	; 27
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	94 e0       	ldi	r25, 0x04	; 4
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_init+0x36>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_init+0x3c>
 26c:	00 00       	nop
	_delay_ms(4.1);

	SET_E;
 26e:	da 9a       	sbi	0x1b, 2	; 27
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
 270:	db 9a       	sbi	0x1b, 3	; 27
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
 272:	dc 9a       	sbi	0x1b, 4	; 27
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
 274:	92 98       	cbi	0x12, 2	; 18
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
 276:	93 98       	cbi	0x12, 3	; 18
	CLR_E;
	_delay_ms(4.1);

	SET_E;
	lcd_sendHalf(0x03);	// tryb 8-bitowy
	CLR_E;
 278:	da 98       	cbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	91 e2       	ldi	r25, 0x21	; 33
 27c:	9a 95       	dec	r25
 27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_init+0x4c>
 280:	00 00       	nop
	_delay_us(100);

	SET_E;
 282:	da 9a       	sbi	0x1b, 2	; 27
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
 284:	db 9a       	sbi	0x1b, 3	; 27
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
 286:	dc 9a       	sbi	0x1b, 4	; 27
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
 288:	92 98       	cbi	0x12, 2	; 18
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
 28a:	93 98       	cbi	0x12, 3	; 18
	CLR_E;
	_delay_us(100);

	SET_E;
	lcd_sendHalf(0x03);	// tryb 8-bitowy
	CLR_E;
 28c:	da 98       	cbi	0x1b, 2	; 27
 28e:	81 e2       	ldi	r24, 0x21	; 33
 290:	8a 95       	dec	r24
 292:	f1 f7       	brne	.-4      	; 0x290 <lcd_init+0x60>
 294:	00 00       	nop
	_delay_us(100);

	SET_E;
 296:	da 9a       	sbi	0x1b, 2	; 27
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
 298:	db 98       	cbi	0x1b, 3	; 27
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
 29a:	dc 9a       	sbi	0x1b, 4	; 27
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
 29c:	92 98       	cbi	0x12, 2	; 18
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
 29e:	93 98       	cbi	0x12, 3	; 18
	CLR_E;
	_delay_us(100);

	SET_E;
	lcd_sendHalf(0x02);// tryb 4-bitowy
	CLR_E;
 2a0:	da 98       	cbi	0x1b, 2	; 27
 2a2:	91 e2       	ldi	r25, 0x21	; 33
 2a4:	9a 95       	dec	r25
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <lcd_init+0x74>
 2a8:	00 00       	nop
	_delay_us(100);

	// ju¿ mo¿na u¿ywaæ Busy Flag
	// tryb 4-bitowy, 2 wiersze, znak 5x7
	lcd_write_cmd( LCDC_FUNC|LCDC_FUNC4B|LCDC_FUNC2L|LCDC_FUNC5x7 );
 2aa:	88 e2       	ldi	r24, 0x28	; 40
 2ac:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_write_cmd>
	// wy³¹czenie kursora
	lcd_write_cmd( LCDC_ONOFF|LCDC_CURSOROFF );
 2b0:	88 e0       	ldi	r24, 0x08	; 8
 2b2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_write_cmd>
	// w³¹czenie wyœwietlacza
	lcd_write_cmd( LCDC_ONOFF|LCDC_DISPLAYON );
 2b6:	8c e0       	ldi	r24, 0x0C	; 12
 2b8:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_write_cmd>
	// przesuwanie kursora w prawo bez przesuwania zawartoœci ekranu
	lcd_write_cmd( LCDC_ENTRY|LCDC_ENTRYR );
 2bc:	86 e0       	ldi	r24, 0x06	; 6
 2be:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_write_cmd>

	// kasowanie ekranu
	lcd_cls();
 2c2:	0e 94 10 01 	call	0x220	; 0x220 <lcd_cls>
 2c6:	08 95       	ret

000002c8 <main>:




int main(void)
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	2a 97       	sbiw	r28, 0x0a	; 10
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
	DDRB |= 0x08; //wyjscie PB3
 2dc:	bb 9a       	sbi	0x17, 3	; 23
	DDRC = 0x0f;
 2de:	8f e0       	ldi	r24, 0x0F	; 15
 2e0:	84 bb       	out	0x14, r24	; 20


		
	ADMUX |=(1<<REFS0); //NAP ODN VCC
 2e2:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0); //WLACZENIE ADC; PRESKALER 8	
 2e4:	86 b1       	in	r24, 0x06	; 6
 2e6:	83 68       	ori	r24, 0x83	; 131
 2e8:	86 b9       	out	0x06, r24	; 6
	
	TCCR0 |= 0x48; //fast PWM
 2ea:	83 b7       	in	r24, 0x33	; 51
 2ec:	88 64       	ori	r24, 0x48	; 72
 2ee:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= 0x20; // star wys,
 2f0:	83 b7       	in	r24, 0x33	; 51
 2f2:	80 62       	ori	r24, 0x20	; 32
 2f4:	83 bf       	out	0x33, r24	; 51

	
	
	TCCR0 |= 0x03; // preskaler 64
 2f6:	83 b7       	in	r24, 0x33	; 51
 2f8:	83 60       	ori	r24, 0x03	; 3
 2fa:	83 bf       	out	0x33, r24	; 51
	OCR0 = 0;
 2fc:	1c be       	out	0x3c, r1	; 60
	double procpt, proclp, proclpt, predk;
	double pt, lp, lpt;
	double naskr;//nastawa skretu
	double pzlp, pzlpt, pzpt; //punkt zero lewo prawo

	lcd_init();
 2fe:	0e 94 18 01 	call	0x230	; 0x230 <lcd_init>
	lcd_cls();
 302:	0e 94 10 01 	call	0x220	; 0x220 <lcd_cls>
	lcd_locate(0,0);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_locate>
	
	ADMUX |= 0x07; // ADC7
 30e:	87 b1       	in	r24, 0x07	; 7
 310:	87 60       	ori	r24, 0x07	; 7
 312:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC); //uruchomienie pomiaru adc
 314:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));
 316:	36 99       	sbic	0x06, 6	; 6
 318:	fe cf       	rjmp	.-4      	; 0x316 <main+0x4e>
	pzpt=(ADCW*25)/255;
 31a:	84 b1       	in	r24, 0x04	; 4
 31c:	95 b1       	in	r25, 0x05	; 5
 31e:	49 e1       	ldi	r20, 0x19	; 25
 320:	48 9f       	mul	r20, r24
 322:	90 01       	movw	r18, r0
 324:	49 9f       	mul	r20, r25
 326:	30 0d       	add	r19, r0
 328:	11 24       	eor	r1, r1
 32a:	a1 e8       	ldi	r26, 0x81	; 129
 32c:	b0 e8       	ldi	r27, 0x80	; 128
 32e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__umulhisi3>
 332:	88 0f       	add	r24, r24
 334:	89 2f       	mov	r24, r25
 336:	88 1f       	adc	r24, r24
 338:	99 0b       	sbc	r25, r25
 33a:	91 95       	neg	r25
 33c:	bc 01       	movw	r22, r24
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 39 04 	call	0x872	; 0x872 <__floatunsisf>
 346:	6c 83       	std	Y+4, r22	; 0x04
 348:	7d 83       	std	Y+5, r23	; 0x05
 34a:	8e 83       	std	Y+6, r24	; 0x06
 34c:	9f 83       	std	Y+7, r25	; 0x07
	
	ADMUX ^= 0x01; // ADC6
 34e:	97 b1       	in	r25, 0x07	; 7
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	89 27       	eor	r24, r25
 354:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC); //uruchomienie pomiaru adc
 356:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));
 358:	36 99       	sbic	0x06, 6	; 6
 35a:	fe cf       	rjmp	.-4      	; 0x358 <main+0x90>
	pzlp = (ADCW*25)/255;
 35c:	84 b1       	in	r24, 0x04	; 4
 35e:	95 b1       	in	r25, 0x05	; 5
 360:	49 e1       	ldi	r20, 0x19	; 25
 362:	48 9f       	mul	r20, r24
 364:	90 01       	movw	r18, r0
 366:	49 9f       	mul	r20, r25
 368:	30 0d       	add	r19, r0
 36a:	11 24       	eor	r1, r1
 36c:	a1 e8       	ldi	r26, 0x81	; 129
 36e:	b0 e8       	ldi	r27, 0x80	; 128
 370:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__umulhisi3>
 374:	88 0f       	add	r24, r24
 376:	89 2f       	mov	r24, r25
 378:	88 1f       	adc	r24, r24
 37a:	99 0b       	sbc	r25, r25
 37c:	91 95       	neg	r25
 37e:	bc 01       	movw	r22, r24
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 39 04 	call	0x872	; 0x872 <__floatunsisf>
 388:	d6 2e       	mov	r13, r22
 38a:	c7 2e       	mov	r12, r23
 38c:	b8 2e       	mov	r11, r24
 38e:	a9 2e       	mov	r10, r25
	
	ADMUX ^= 0x03; // ADC5
 390:	97 b1       	in	r25, 0x07	; 7
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	89 27       	eor	r24, r25
 396:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC); //uruchomienie pomiaru adc
 398:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));
 39a:	36 99       	sbic	0x06, 6	; 6
 39c:	fe cf       	rjmp	.-4      	; 0x39a <main+0xd2>
	pzlpt = (ADCW*25)/255;
 39e:	84 b1       	in	r24, 0x04	; 4
 3a0:	95 b1       	in	r25, 0x05	; 5
 3a2:	49 e1       	ldi	r20, 0x19	; 25
 3a4:	48 9f       	mul	r20, r24
 3a6:	90 01       	movw	r18, r0
 3a8:	49 9f       	mul	r20, r25
 3aa:	30 0d       	add	r19, r0
 3ac:	11 24       	eor	r1, r1
 3ae:	a1 e8       	ldi	r26, 0x81	; 129
 3b0:	b0 e8       	ldi	r27, 0x80	; 128
 3b2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__umulhisi3>
 3b6:	88 0f       	add	r24, r24
 3b8:	89 2f       	mov	r24, r25
 3ba:	88 1f       	adc	r24, r24
 3bc:	99 0b       	sbc	r25, r25
 3be:	91 95       	neg	r25
 3c0:	bc 01       	movw	r22, r24
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 39 04 	call	0x872	; 0x872 <__floatunsisf>
 3ca:	e6 2e       	mov	r14, r22
 3cc:	37 2e       	mov	r3, r23
 3ce:	48 2e       	mov	r4, r24
 3d0:	59 2e       	mov	r5, r25
				}
				
				if (naskr<(proclpt-pzlpt)+1)
				{
					PORTC |= 0x02;
					PORTC = ~0x01;
 3d2:	8d 2c       	mov	r8, r13
 3d4:	7c 2c       	mov	r7, r12
 3d6:	6b 2c       	mov	r6, r11
	pzlpt = (ADCW*25)/255;

	
	while(1)
	{
				lcd_locate(3,0);
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_locate>
				lcd_int(pzlp);
 3e0:	68 2d       	mov	r22, r8
 3e2:	77 2d       	mov	r23, r7
 3e4:	86 2d       	mov	r24, r6
 3e6:	9a 2d       	mov	r25, r10
 3e8:	0e 94 08 04 	call	0x810	; 0x810 <__fixsfsi>
 3ec:	cb 01       	movw	r24, r22
 3ee:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_int>
				lcd_str("lp ");
 3f2:	80 e6       	ldi	r24, 0x60	; 96
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_str>
				lcd_int(pzlpt);
 3fa:	6e 2d       	mov	r22, r14
 3fc:	73 2d       	mov	r23, r3
 3fe:	84 2d       	mov	r24, r4
 400:	95 2d       	mov	r25, r5
 402:	0e 94 08 04 	call	0x810	; 0x810 <__fixsfsi>
 406:	cb 01       	movw	r24, r22
 408:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_int>
				lcd_str("lpt ");
 40c:	84 e6       	ldi	r24, 0x64	; 100
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_str>
				lcd_int(pzpt);
 414:	5c 81       	ldd	r21, Y+4	; 0x04
 416:	4d 81       	ldd	r20, Y+5	; 0x05
 418:	3e 81       	ldd	r19, Y+6	; 0x06
 41a:	2f 81       	ldd	r18, Y+7	; 0x07
 41c:	65 2f       	mov	r22, r21
 41e:	74 2f       	mov	r23, r20
 420:	83 2f       	mov	r24, r19
 422:	92 2f       	mov	r25, r18
 424:	0e 94 08 04 	call	0x810	; 0x810 <__fixsfsi>
 428:	cb 01       	movw	r24, r22
 42a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_int>
				lcd_str("pt ");								
 42e:	85 e6       	ldi	r24, 0x65	; 101
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_str>
		
		ADMUX |= 0x07; // ADC7
 436:	87 b1       	in	r24, 0x07	; 7
 438:	87 60       	ori	r24, 0x07	; 7
 43a:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC); //uruchomienie pomiaru adc
 43c:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1<<ADSC));
 43e:	36 99       	sbic	0x06, 6	; 6
 440:	fe cf       	rjmp	.-4      	; 0x43e <main+0x176>
		pt=ADCW;
 442:	64 b1       	in	r22, 0x04	; 4
 444:	75 b1       	in	r23, 0x05	; 5
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 39 04 	call	0x872	; 0x872 <__floatunsisf>
 44e:	26 2e       	mov	r2, r22
 450:	79 83       	std	Y+1, r23	; 0x01
 452:	8a 83       	std	Y+2, r24	; 0x02
 454:	9b 83       	std	Y+3, r25	; 0x03
		
		ADMUX ^= 0x01; // ADC6 
 456:	87 b1       	in	r24, 0x07	; 7
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	89 27       	eor	r24, r25
 45c:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC); //uruchomienie pomiaru adc
 45e:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1<<ADSC));
 460:	36 99       	sbic	0x06, 6	; 6
 462:	fe cf       	rjmp	.-4      	; 0x460 <main+0x198>
		lp = ADCW;
 464:	64 b1       	in	r22, 0x04	; 4
 466:	75 b1       	in	r23, 0x05	; 5
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 39 04 	call	0x872	; 0x872 <__floatunsisf>
 470:	96 2e       	mov	r9, r22
 472:	b7 2e       	mov	r11, r23
 474:	c8 2e       	mov	r12, r24
 476:	d9 2e       	mov	r13, r25
		
		ADMUX ^= 0x03; // ADC5
 478:	97 b1       	in	r25, 0x07	; 7
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	89 27       	eor	r24, r25
 47e:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC); //uruchomienie pomiaru adc
 480:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1<<ADSC));
 482:	36 99       	sbic	0x06, 6	; 6
 484:	fe cf       	rjmp	.-4      	; 0x482 <main+0x1ba>
		lpt = ADCW;
 486:	64 b1       	in	r22, 0x04	; 4
 488:	75 b1       	in	r23, 0x05	; 5
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 39 04 	call	0x872	; 0x872 <__floatunsisf>
		
		proclpt = (lpt*25)/255;
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	48 ec       	ldi	r20, 0xC8	; 200
 498:	51 e4       	ldi	r21, 0x41	; 65
 49a:	0e 94 ef 04 	call	0x9de	; 0x9de <__mulsf3>
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	4f e7       	ldi	r20, 0x7F	; 127
 4a4:	53 e4       	ldi	r21, 0x43	; 67
 4a6:	0e 94 a0 03 	call	0x740	; 0x740 <__divsf3>
 4aa:	f6 2e       	mov	r15, r22
 4ac:	07 2f       	mov	r16, r23
 4ae:	18 2f       	mov	r17, r24
 4b0:	9a 87       	std	Y+10, r25	; 0x0a
		lcd_locate(0,0);
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_locate>
		lcd_int(proclpt);
 4ba:	2a 85       	ldd	r18, Y+10	; 0x0a
 4bc:	6f 2d       	mov	r22, r15
 4be:	70 2f       	mov	r23, r16
 4c0:	81 2f       	mov	r24, r17
 4c2:	92 2f       	mov	r25, r18
 4c4:	0e 94 08 04 	call	0x810	; 0x810 <__fixsfsi>
 4c8:	cb 01       	movw	r24, r22
 4ca:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_int>
		lcd_str(" lewo/prawo t");
 4ce:	89 e6       	ldi	r24, 0x69	; 105
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_str>
				
		procpt = (pt*25)/255;
		lcd_locate(1,0);
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_locate>
		proclpt = (lpt*25)/255;
		lcd_locate(0,0);
		lcd_int(proclpt);
		lcd_str(" lewo/prawo t");
				
		procpt = (pt*25)/255;
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	48 ec       	ldi	r20, 0xC8	; 200
 4e4:	51 e4       	ldi	r21, 0x41	; 65
 4e6:	a9 81       	ldd	r26, Y+1	; 0x01
 4e8:	ea 81       	ldd	r30, Y+2	; 0x02
 4ea:	fb 81       	ldd	r31, Y+3	; 0x03
 4ec:	62 2d       	mov	r22, r2
 4ee:	7a 2f       	mov	r23, r26
 4f0:	8e 2f       	mov	r24, r30
 4f2:	9f 2f       	mov	r25, r31
 4f4:	0e 94 ef 04 	call	0x9de	; 0x9de <__mulsf3>
 4f8:	20 e0       	ldi	r18, 0x00	; 0
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	4f e7       	ldi	r20, 0x7F	; 127
 4fe:	53 e4       	ldi	r21, 0x43	; 67
 500:	0e 94 a0 03 	call	0x740	; 0x740 <__divsf3>
		lcd_locate(1,0);
		lcd_int(procpt);
 504:	0e 94 08 04 	call	0x810	; 0x810 <__fixsfsi>
 508:	cb 01       	movw	r24, r22
 50a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_int>
		lcd_str(" przod/tyl   ");
 50e:	87 e7       	ldi	r24, 0x77	; 119
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_str>

		proclp = (lp*25)/255;		
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	48 ec       	ldi	r20, 0xC8	; 200
 51c:	51 e4       	ldi	r21, 0x41	; 65
 51e:	69 2d       	mov	r22, r9
 520:	7b 2d       	mov	r23, r11
 522:	8c 2d       	mov	r24, r12
 524:	9d 2d       	mov	r25, r13
 526:	0e 94 ef 04 	call	0x9de	; 0x9de <__mulsf3>
 52a:	20 e0       	ldi	r18, 0x00	; 0
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	4f e7       	ldi	r20, 0x7F	; 127
 530:	53 e4       	ldi	r21, 0x43	; 67
 532:	0e 94 a0 03 	call	0x740	; 0x740 <__divsf3>
 536:	96 2e       	mov	r9, r22
 538:	b7 2e       	mov	r11, r23
 53a:	c8 2e       	mov	r12, r24
 53c:	d9 2e       	mov	r13, r25
		lcd_locate(2,0);
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	82 e0       	ldi	r24, 0x02	; 2
 542:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_locate>
		lcd_int(proclp);		
 546:	69 2d       	mov	r22, r9
 548:	7b 2d       	mov	r23, r11
 54a:	8c 2d       	mov	r24, r12
 54c:	9d 2d       	mov	r25, r13
 54e:	0e 94 08 04 	call	0x810	; 0x810 <__fixsfsi>
 552:	cb 01       	movw	r24, r22
 554:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_int>
		lcd_str(" lewo / prawo ");
 558:	85 e8       	ldi	r24, 0x85	; 133
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_str>
		
				naskr = (12*(proclp-pzlp))/11;
 560:	28 2d       	mov	r18, r8
 562:	37 2d       	mov	r19, r7
 564:	46 2d       	mov	r20, r6
 566:	5a 2d       	mov	r21, r10
 568:	69 2d       	mov	r22, r9
 56a:	7b 2d       	mov	r23, r11
 56c:	8c 2d       	mov	r24, r12
 56e:	9d 2d       	mov	r25, r13
 570:	0e 94 37 03 	call	0x66e	; 0x66e <__subsf3>
 574:	20 e0       	ldi	r18, 0x00	; 0
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	40 e4       	ldi	r20, 0x40	; 64
 57a:	51 e4       	ldi	r21, 0x41	; 65
 57c:	0e 94 ef 04 	call	0x9de	; 0x9de <__mulsf3>
 580:	20 e0       	ldi	r18, 0x00	; 0
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	40 e3       	ldi	r20, 0x30	; 48
 586:	51 e4       	ldi	r21, 0x41	; 65
 588:	0e 94 a0 03 	call	0x740	; 0x740 <__divsf3>
 58c:	96 2e       	mov	r9, r22
 58e:	b7 2e       	mov	r11, r23
 590:	c8 2e       	mov	r12, r24
 592:	d9 2e       	mov	r13, r25
				
				if (naskr>(proclpt-pzlpt))
 594:	2e 2d       	mov	r18, r14
 596:	33 2d       	mov	r19, r3
 598:	44 2d       	mov	r20, r4
 59a:	55 2d       	mov	r21, r5
 59c:	ea 85       	ldd	r30, Y+10	; 0x0a
 59e:	6f 2d       	mov	r22, r15
 5a0:	70 2f       	mov	r23, r16
 5a2:	81 2f       	mov	r24, r17
 5a4:	9e 2f       	mov	r25, r30
 5a6:	0e 94 37 03 	call	0x66e	; 0x66e <__subsf3>
 5aa:	f6 2e       	mov	r15, r22
 5ac:	07 2f       	mov	r16, r23
 5ae:	18 2f       	mov	r17, r24
 5b0:	29 2e       	mov	r2, r25
 5b2:	76 2f       	mov	r23, r22
 5b4:	27 2f       	mov	r18, r23
 5b6:	30 2f       	mov	r19, r16
 5b8:	41 2f       	mov	r20, r17
 5ba:	52 2d       	mov	r21, r2
 5bc:	69 2d       	mov	r22, r9
 5be:	7b 2d       	mov	r23, r11
 5c0:	8c 2d       	mov	r24, r12
 5c2:	9d 2d       	mov	r25, r13
 5c4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__gesf2>
 5c8:	18 16       	cp	r1, r24
 5ca:	2c f4       	brge	.+10     	; 0x5d6 <main+0x30e>
				{
					PORTC |= 0x01;
 5cc:	a8 9a       	sbi	0x15, 0	; 21
					PORTC = ~0x02;
 5ce:	ed ef       	ldi	r30, 0xFD	; 253
 5d0:	e5 bb       	out	0x15, r30	; 21
					OCR0 = 255;
 5d2:	ff ef       	ldi	r31, 0xFF	; 255
 5d4:	fc bf       	out	0x3c, r31	; 60
				}
				
				if (naskr<(proclpt-pzlpt)+1)
 5d6:	20 e0       	ldi	r18, 0x00	; 0
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	40 e8       	ldi	r20, 0x80	; 128
 5dc:	5f e3       	ldi	r21, 0x3F	; 63
 5de:	6f 2d       	mov	r22, r15
 5e0:	70 2f       	mov	r23, r16
 5e2:	81 2f       	mov	r24, r17
 5e4:	92 2d       	mov	r25, r2
 5e6:	0e 94 38 03 	call	0x670	; 0x670 <__addsf3>
 5ea:	9b 01       	movw	r18, r22
 5ec:	ac 01       	movw	r20, r24
 5ee:	69 2d       	mov	r22, r9
 5f0:	7b 2d       	mov	r23, r11
 5f2:	8c 2d       	mov	r24, r12
 5f4:	9d 2d       	mov	r25, r13
 5f6:	0e 94 9c 03 	call	0x738	; 0x738 <__cmpsf2>
 5fa:	88 23       	and	r24, r24
 5fc:	2c f4       	brge	.+10     	; 0x608 <main+0x340>
				{
					PORTC |= 0x02;
 5fe:	a9 9a       	sbi	0x15, 1	; 21
					PORTC = ~0x01;
 600:	8e ef       	ldi	r24, 0xFE	; 254
 602:	85 bb       	out	0x15, r24	; 21
					OCR0 = 255;					
 604:	9f ef       	ldi	r25, 0xFF	; 255
 606:	9c bf       	out	0x3c, r25	; 60
				}
				if ((proclpt-pzlpt) >naskr-1 & (proclpt-pzlpt)<naskr +1)
 608:	20 e0       	ldi	r18, 0x00	; 0
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	40 e8       	ldi	r20, 0x80	; 128
 60e:	5f e3       	ldi	r21, 0x3F	; 63
 610:	69 2d       	mov	r22, r9
 612:	7b 2d       	mov	r23, r11
 614:	8c 2d       	mov	r24, r12
 616:	9d 2d       	mov	r25, r13
 618:	0e 94 38 03 	call	0x670	; 0x670 <__addsf3>
 61c:	9b 01       	movw	r18, r22
 61e:	ac 01       	movw	r20, r24
 620:	6f 2d       	mov	r22, r15
 622:	70 2f       	mov	r23, r16
 624:	81 2f       	mov	r24, r17
 626:	92 2d       	mov	r25, r2
 628:	0e 94 9c 03 	call	0x738	; 0x738 <__cmpsf2>
 62c:	88 0f       	add	r24, r24
 62e:	88 0b       	sbc	r24, r24
 630:	81 70       	andi	r24, 0x01	; 1
 632:	09 f4       	brne	.+2      	; 0x636 <main+0x36e>
 634:	d1 ce       	rjmp	.-606    	; 0x3d8 <main+0x110>
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	40 e8       	ldi	r20, 0x80	; 128
 63c:	5f e3       	ldi	r21, 0x3F	; 63
 63e:	69 2d       	mov	r22, r9
 640:	7b 2d       	mov	r23, r11
 642:	8c 2d       	mov	r24, r12
 644:	9d 2d       	mov	r25, r13
 646:	0e 94 37 03 	call	0x66e	; 0x66e <__subsf3>
 64a:	9b 01       	movw	r18, r22
 64c:	ac 01       	movw	r20, r24
 64e:	dd 24       	eor	r13, r13
 650:	d3 94       	inc	r13
 652:	6f 2d       	mov	r22, r15
 654:	70 2f       	mov	r23, r16
 656:	81 2f       	mov	r24, r17
 658:	92 2d       	mov	r25, r2
 65a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__gesf2>
 65e:	18 16       	cp	r1, r24
 660:	0c f0       	brlt	.+2      	; 0x664 <main+0x39c>
 662:	d1 2c       	mov	r13, r1
 664:	dd 20       	and	r13, r13
 666:	09 f4       	brne	.+2      	; 0x66a <main+0x3a2>
 668:	b7 ce       	rjmp	.-658    	; 0x3d8 <main+0x110>
				{OCR0=0;	}
 66a:	1c be       	out	0x3c, r1	; 60
 66c:	b5 ce       	rjmp	.-662    	; 0x3d8 <main+0x110>

0000066e <__subsf3>:
 66e:	50 58       	subi	r21, 0x80	; 128

00000670 <__addsf3>:
 670:	bb 27       	eor	r27, r27
 672:	aa 27       	eor	r26, r26
 674:	0e d0       	rcall	.+28     	; 0x692 <__addsf3x>
 676:	75 c1       	rjmp	.+746    	; 0x962 <__fp_round>
 678:	66 d1       	rcall	.+716    	; 0x946 <__fp_pscA>
 67a:	30 f0       	brcs	.+12     	; 0x688 <__addsf3+0x18>
 67c:	6b d1       	rcall	.+726    	; 0x954 <__fp_pscB>
 67e:	20 f0       	brcs	.+8      	; 0x688 <__addsf3+0x18>
 680:	31 f4       	brne	.+12     	; 0x68e <__addsf3+0x1e>
 682:	9f 3f       	cpi	r25, 0xFF	; 255
 684:	11 f4       	brne	.+4      	; 0x68a <__addsf3+0x1a>
 686:	1e f4       	brtc	.+6      	; 0x68e <__addsf3+0x1e>
 688:	5b c1       	rjmp	.+694    	; 0x940 <__fp_nan>
 68a:	0e f4       	brtc	.+2      	; 0x68e <__addsf3+0x1e>
 68c:	e0 95       	com	r30
 68e:	e7 fb       	bst	r30, 7
 690:	51 c1       	rjmp	.+674    	; 0x934 <__fp_inf>

00000692 <__addsf3x>:
 692:	e9 2f       	mov	r30, r25
 694:	77 d1       	rcall	.+750    	; 0x984 <__fp_split3>
 696:	80 f3       	brcs	.-32     	; 0x678 <__addsf3+0x8>
 698:	ba 17       	cp	r27, r26
 69a:	62 07       	cpc	r22, r18
 69c:	73 07       	cpc	r23, r19
 69e:	84 07       	cpc	r24, r20
 6a0:	95 07       	cpc	r25, r21
 6a2:	18 f0       	brcs	.+6      	; 0x6aa <__addsf3x+0x18>
 6a4:	71 f4       	brne	.+28     	; 0x6c2 <__addsf3x+0x30>
 6a6:	9e f5       	brtc	.+102    	; 0x70e <__addsf3x+0x7c>
 6a8:	8f c1       	rjmp	.+798    	; 0x9c8 <__fp_zero>
 6aa:	0e f4       	brtc	.+2      	; 0x6ae <__addsf3x+0x1c>
 6ac:	e0 95       	com	r30
 6ae:	0b 2e       	mov	r0, r27
 6b0:	ba 2f       	mov	r27, r26
 6b2:	a0 2d       	mov	r26, r0
 6b4:	0b 01       	movw	r0, r22
 6b6:	b9 01       	movw	r22, r18
 6b8:	90 01       	movw	r18, r0
 6ba:	0c 01       	movw	r0, r24
 6bc:	ca 01       	movw	r24, r20
 6be:	a0 01       	movw	r20, r0
 6c0:	11 24       	eor	r1, r1
 6c2:	ff 27       	eor	r31, r31
 6c4:	59 1b       	sub	r21, r25
 6c6:	99 f0       	breq	.+38     	; 0x6ee <__addsf3x+0x5c>
 6c8:	59 3f       	cpi	r21, 0xF9	; 249
 6ca:	50 f4       	brcc	.+20     	; 0x6e0 <__addsf3x+0x4e>
 6cc:	50 3e       	cpi	r21, 0xE0	; 224
 6ce:	68 f1       	brcs	.+90     	; 0x72a <__addsf3x+0x98>
 6d0:	1a 16       	cp	r1, r26
 6d2:	f0 40       	sbci	r31, 0x00	; 0
 6d4:	a2 2f       	mov	r26, r18
 6d6:	23 2f       	mov	r18, r19
 6d8:	34 2f       	mov	r19, r20
 6da:	44 27       	eor	r20, r20
 6dc:	58 5f       	subi	r21, 0xF8	; 248
 6de:	f3 cf       	rjmp	.-26     	; 0x6c6 <__addsf3x+0x34>
 6e0:	46 95       	lsr	r20
 6e2:	37 95       	ror	r19
 6e4:	27 95       	ror	r18
 6e6:	a7 95       	ror	r26
 6e8:	f0 40       	sbci	r31, 0x00	; 0
 6ea:	53 95       	inc	r21
 6ec:	c9 f7       	brne	.-14     	; 0x6e0 <__addsf3x+0x4e>
 6ee:	7e f4       	brtc	.+30     	; 0x70e <__addsf3x+0x7c>
 6f0:	1f 16       	cp	r1, r31
 6f2:	ba 0b       	sbc	r27, r26
 6f4:	62 0b       	sbc	r22, r18
 6f6:	73 0b       	sbc	r23, r19
 6f8:	84 0b       	sbc	r24, r20
 6fa:	ba f0       	brmi	.+46     	; 0x72a <__addsf3x+0x98>
 6fc:	91 50       	subi	r25, 0x01	; 1
 6fe:	a1 f0       	breq	.+40     	; 0x728 <__addsf3x+0x96>
 700:	ff 0f       	add	r31, r31
 702:	bb 1f       	adc	r27, r27
 704:	66 1f       	adc	r22, r22
 706:	77 1f       	adc	r23, r23
 708:	88 1f       	adc	r24, r24
 70a:	c2 f7       	brpl	.-16     	; 0x6fc <__addsf3x+0x6a>
 70c:	0e c0       	rjmp	.+28     	; 0x72a <__addsf3x+0x98>
 70e:	ba 0f       	add	r27, r26
 710:	62 1f       	adc	r22, r18
 712:	73 1f       	adc	r23, r19
 714:	84 1f       	adc	r24, r20
 716:	48 f4       	brcc	.+18     	; 0x72a <__addsf3x+0x98>
 718:	87 95       	ror	r24
 71a:	77 95       	ror	r23
 71c:	67 95       	ror	r22
 71e:	b7 95       	ror	r27
 720:	f7 95       	ror	r31
 722:	9e 3f       	cpi	r25, 0xFE	; 254
 724:	08 f0       	brcs	.+2      	; 0x728 <__addsf3x+0x96>
 726:	b3 cf       	rjmp	.-154    	; 0x68e <__addsf3+0x1e>
 728:	93 95       	inc	r25
 72a:	88 0f       	add	r24, r24
 72c:	08 f0       	brcs	.+2      	; 0x730 <__addsf3x+0x9e>
 72e:	99 27       	eor	r25, r25
 730:	ee 0f       	add	r30, r30
 732:	97 95       	ror	r25
 734:	87 95       	ror	r24
 736:	08 95       	ret

00000738 <__cmpsf2>:
 738:	d9 d0       	rcall	.+434    	; 0x8ec <__fp_cmp>
 73a:	08 f4       	brcc	.+2      	; 0x73e <__cmpsf2+0x6>
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	08 95       	ret

00000740 <__divsf3>:
 740:	0c d0       	rcall	.+24     	; 0x75a <__divsf3x>
 742:	0f c1       	rjmp	.+542    	; 0x962 <__fp_round>
 744:	07 d1       	rcall	.+526    	; 0x954 <__fp_pscB>
 746:	40 f0       	brcs	.+16     	; 0x758 <__divsf3+0x18>
 748:	fe d0       	rcall	.+508    	; 0x946 <__fp_pscA>
 74a:	30 f0       	brcs	.+12     	; 0x758 <__divsf3+0x18>
 74c:	21 f4       	brne	.+8      	; 0x756 <__divsf3+0x16>
 74e:	5f 3f       	cpi	r21, 0xFF	; 255
 750:	19 f0       	breq	.+6      	; 0x758 <__divsf3+0x18>
 752:	f0 c0       	rjmp	.+480    	; 0x934 <__fp_inf>
 754:	51 11       	cpse	r21, r1
 756:	39 c1       	rjmp	.+626    	; 0x9ca <__fp_szero>
 758:	f3 c0       	rjmp	.+486    	; 0x940 <__fp_nan>

0000075a <__divsf3x>:
 75a:	14 d1       	rcall	.+552    	; 0x984 <__fp_split3>
 75c:	98 f3       	brcs	.-26     	; 0x744 <__divsf3+0x4>

0000075e <__divsf3_pse>:
 75e:	99 23       	and	r25, r25
 760:	c9 f3       	breq	.-14     	; 0x754 <__divsf3+0x14>
 762:	55 23       	and	r21, r21
 764:	b1 f3       	breq	.-20     	; 0x752 <__divsf3+0x12>
 766:	95 1b       	sub	r25, r21
 768:	55 0b       	sbc	r21, r21
 76a:	bb 27       	eor	r27, r27
 76c:	aa 27       	eor	r26, r26
 76e:	62 17       	cp	r22, r18
 770:	73 07       	cpc	r23, r19
 772:	84 07       	cpc	r24, r20
 774:	38 f0       	brcs	.+14     	; 0x784 <__divsf3_pse+0x26>
 776:	9f 5f       	subi	r25, 0xFF	; 255
 778:	5f 4f       	sbci	r21, 0xFF	; 255
 77a:	22 0f       	add	r18, r18
 77c:	33 1f       	adc	r19, r19
 77e:	44 1f       	adc	r20, r20
 780:	aa 1f       	adc	r26, r26
 782:	a9 f3       	breq	.-22     	; 0x76e <__divsf3_pse+0x10>
 784:	33 d0       	rcall	.+102    	; 0x7ec <__divsf3_pse+0x8e>
 786:	0e 2e       	mov	r0, r30
 788:	3a f0       	brmi	.+14     	; 0x798 <__divsf3_pse+0x3a>
 78a:	e0 e8       	ldi	r30, 0x80	; 128
 78c:	30 d0       	rcall	.+96     	; 0x7ee <__divsf3_pse+0x90>
 78e:	91 50       	subi	r25, 0x01	; 1
 790:	50 40       	sbci	r21, 0x00	; 0
 792:	e6 95       	lsr	r30
 794:	00 1c       	adc	r0, r0
 796:	ca f7       	brpl	.-14     	; 0x78a <__divsf3_pse+0x2c>
 798:	29 d0       	rcall	.+82     	; 0x7ec <__divsf3_pse+0x8e>
 79a:	fe 2f       	mov	r31, r30
 79c:	27 d0       	rcall	.+78     	; 0x7ec <__divsf3_pse+0x8e>
 79e:	66 0f       	add	r22, r22
 7a0:	77 1f       	adc	r23, r23
 7a2:	88 1f       	adc	r24, r24
 7a4:	bb 1f       	adc	r27, r27
 7a6:	26 17       	cp	r18, r22
 7a8:	37 07       	cpc	r19, r23
 7aa:	48 07       	cpc	r20, r24
 7ac:	ab 07       	cpc	r26, r27
 7ae:	b0 e8       	ldi	r27, 0x80	; 128
 7b0:	09 f0       	breq	.+2      	; 0x7b4 <__divsf3_pse+0x56>
 7b2:	bb 0b       	sbc	r27, r27
 7b4:	80 2d       	mov	r24, r0
 7b6:	bf 01       	movw	r22, r30
 7b8:	ff 27       	eor	r31, r31
 7ba:	93 58       	subi	r25, 0x83	; 131
 7bc:	5f 4f       	sbci	r21, 0xFF	; 255
 7be:	2a f0       	brmi	.+10     	; 0x7ca <__divsf3_pse+0x6c>
 7c0:	9e 3f       	cpi	r25, 0xFE	; 254
 7c2:	51 05       	cpc	r21, r1
 7c4:	68 f0       	brcs	.+26     	; 0x7e0 <__divsf3_pse+0x82>
 7c6:	b6 c0       	rjmp	.+364    	; 0x934 <__fp_inf>
 7c8:	00 c1       	rjmp	.+512    	; 0x9ca <__fp_szero>
 7ca:	5f 3f       	cpi	r21, 0xFF	; 255
 7cc:	ec f3       	brlt	.-6      	; 0x7c8 <__divsf3_pse+0x6a>
 7ce:	98 3e       	cpi	r25, 0xE8	; 232
 7d0:	dc f3       	brlt	.-10     	; 0x7c8 <__divsf3_pse+0x6a>
 7d2:	86 95       	lsr	r24
 7d4:	77 95       	ror	r23
 7d6:	67 95       	ror	r22
 7d8:	b7 95       	ror	r27
 7da:	f7 95       	ror	r31
 7dc:	9f 5f       	subi	r25, 0xFF	; 255
 7de:	c9 f7       	brne	.-14     	; 0x7d2 <__divsf3_pse+0x74>
 7e0:	88 0f       	add	r24, r24
 7e2:	91 1d       	adc	r25, r1
 7e4:	96 95       	lsr	r25
 7e6:	87 95       	ror	r24
 7e8:	97 f9       	bld	r25, 7
 7ea:	08 95       	ret
 7ec:	e1 e0       	ldi	r30, 0x01	; 1
 7ee:	66 0f       	add	r22, r22
 7f0:	77 1f       	adc	r23, r23
 7f2:	88 1f       	adc	r24, r24
 7f4:	bb 1f       	adc	r27, r27
 7f6:	62 17       	cp	r22, r18
 7f8:	73 07       	cpc	r23, r19
 7fa:	84 07       	cpc	r24, r20
 7fc:	ba 07       	cpc	r27, r26
 7fe:	20 f0       	brcs	.+8      	; 0x808 <__divsf3_pse+0xaa>
 800:	62 1b       	sub	r22, r18
 802:	73 0b       	sbc	r23, r19
 804:	84 0b       	sbc	r24, r20
 806:	ba 0b       	sbc	r27, r26
 808:	ee 1f       	adc	r30, r30
 80a:	88 f7       	brcc	.-30     	; 0x7ee <__divsf3_pse+0x90>
 80c:	e0 95       	com	r30
 80e:	08 95       	ret

00000810 <__fixsfsi>:
 810:	04 d0       	rcall	.+8      	; 0x81a <__fixunssfsi>
 812:	68 94       	set
 814:	b1 11       	cpse	r27, r1
 816:	d9 c0       	rjmp	.+434    	; 0x9ca <__fp_szero>
 818:	08 95       	ret

0000081a <__fixunssfsi>:
 81a:	bc d0       	rcall	.+376    	; 0x994 <__fp_splitA>
 81c:	88 f0       	brcs	.+34     	; 0x840 <__fixunssfsi+0x26>
 81e:	9f 57       	subi	r25, 0x7F	; 127
 820:	90 f0       	brcs	.+36     	; 0x846 <__fixunssfsi+0x2c>
 822:	b9 2f       	mov	r27, r25
 824:	99 27       	eor	r25, r25
 826:	b7 51       	subi	r27, 0x17	; 23
 828:	a0 f0       	brcs	.+40     	; 0x852 <__fixunssfsi+0x38>
 82a:	d1 f0       	breq	.+52     	; 0x860 <__stack+0x1>
 82c:	66 0f       	add	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	1a f0       	brmi	.+6      	; 0x83c <__fixunssfsi+0x22>
 836:	ba 95       	dec	r27
 838:	c9 f7       	brne	.-14     	; 0x82c <__fixunssfsi+0x12>
 83a:	12 c0       	rjmp	.+36     	; 0x860 <__stack+0x1>
 83c:	b1 30       	cpi	r27, 0x01	; 1
 83e:	81 f0       	breq	.+32     	; 0x860 <__stack+0x1>
 840:	c3 d0       	rcall	.+390    	; 0x9c8 <__fp_zero>
 842:	b1 e0       	ldi	r27, 0x01	; 1
 844:	08 95       	ret
 846:	c0 c0       	rjmp	.+384    	; 0x9c8 <__fp_zero>
 848:	67 2f       	mov	r22, r23
 84a:	78 2f       	mov	r23, r24
 84c:	88 27       	eor	r24, r24
 84e:	b8 5f       	subi	r27, 0xF8	; 248
 850:	39 f0       	breq	.+14     	; 0x860 <__stack+0x1>
 852:	b9 3f       	cpi	r27, 0xF9	; 249
 854:	cc f3       	brlt	.-14     	; 0x848 <__fixunssfsi+0x2e>
 856:	86 95       	lsr	r24
 858:	77 95       	ror	r23
 85a:	67 95       	ror	r22
 85c:	b3 95       	inc	r27
 85e:	d9 f7       	brne	.-10     	; 0x856 <__fixunssfsi+0x3c>
 860:	3e f4       	brtc	.+14     	; 0x870 <__stack+0x11>
 862:	90 95       	com	r25
 864:	80 95       	com	r24
 866:	70 95       	com	r23
 868:	61 95       	neg	r22
 86a:	7f 4f       	sbci	r23, 0xFF	; 255
 86c:	8f 4f       	sbci	r24, 0xFF	; 255
 86e:	9f 4f       	sbci	r25, 0xFF	; 255
 870:	08 95       	ret

00000872 <__floatunsisf>:
 872:	e8 94       	clt
 874:	09 c0       	rjmp	.+18     	; 0x888 <__floatsisf+0x12>

00000876 <__floatsisf>:
 876:	97 fb       	bst	r25, 7
 878:	3e f4       	brtc	.+14     	; 0x888 <__floatsisf+0x12>
 87a:	90 95       	com	r25
 87c:	80 95       	com	r24
 87e:	70 95       	com	r23
 880:	61 95       	neg	r22
 882:	7f 4f       	sbci	r23, 0xFF	; 255
 884:	8f 4f       	sbci	r24, 0xFF	; 255
 886:	9f 4f       	sbci	r25, 0xFF	; 255
 888:	99 23       	and	r25, r25
 88a:	a9 f0       	breq	.+42     	; 0x8b6 <__floatsisf+0x40>
 88c:	f9 2f       	mov	r31, r25
 88e:	96 e9       	ldi	r25, 0x96	; 150
 890:	bb 27       	eor	r27, r27
 892:	93 95       	inc	r25
 894:	f6 95       	lsr	r31
 896:	87 95       	ror	r24
 898:	77 95       	ror	r23
 89a:	67 95       	ror	r22
 89c:	b7 95       	ror	r27
 89e:	f1 11       	cpse	r31, r1
 8a0:	f8 cf       	rjmp	.-16     	; 0x892 <__floatsisf+0x1c>
 8a2:	fa f4       	brpl	.+62     	; 0x8e2 <__floatsisf+0x6c>
 8a4:	bb 0f       	add	r27, r27
 8a6:	11 f4       	brne	.+4      	; 0x8ac <__floatsisf+0x36>
 8a8:	60 ff       	sbrs	r22, 0
 8aa:	1b c0       	rjmp	.+54     	; 0x8e2 <__floatsisf+0x6c>
 8ac:	6f 5f       	subi	r22, 0xFF	; 255
 8ae:	7f 4f       	sbci	r23, 0xFF	; 255
 8b0:	8f 4f       	sbci	r24, 0xFF	; 255
 8b2:	9f 4f       	sbci	r25, 0xFF	; 255
 8b4:	16 c0       	rjmp	.+44     	; 0x8e2 <__floatsisf+0x6c>
 8b6:	88 23       	and	r24, r24
 8b8:	11 f0       	breq	.+4      	; 0x8be <__floatsisf+0x48>
 8ba:	96 e9       	ldi	r25, 0x96	; 150
 8bc:	11 c0       	rjmp	.+34     	; 0x8e0 <__floatsisf+0x6a>
 8be:	77 23       	and	r23, r23
 8c0:	21 f0       	breq	.+8      	; 0x8ca <__floatsisf+0x54>
 8c2:	9e e8       	ldi	r25, 0x8E	; 142
 8c4:	87 2f       	mov	r24, r23
 8c6:	76 2f       	mov	r23, r22
 8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <__floatsisf+0x5e>
 8ca:	66 23       	and	r22, r22
 8cc:	71 f0       	breq	.+28     	; 0x8ea <__floatsisf+0x74>
 8ce:	96 e8       	ldi	r25, 0x86	; 134
 8d0:	86 2f       	mov	r24, r22
 8d2:	70 e0       	ldi	r23, 0x00	; 0
 8d4:	60 e0       	ldi	r22, 0x00	; 0
 8d6:	2a f0       	brmi	.+10     	; 0x8e2 <__floatsisf+0x6c>
 8d8:	9a 95       	dec	r25
 8da:	66 0f       	add	r22, r22
 8dc:	77 1f       	adc	r23, r23
 8de:	88 1f       	adc	r24, r24
 8e0:	da f7       	brpl	.-10     	; 0x8d8 <__floatsisf+0x62>
 8e2:	88 0f       	add	r24, r24
 8e4:	96 95       	lsr	r25
 8e6:	87 95       	ror	r24
 8e8:	97 f9       	bld	r25, 7
 8ea:	08 95       	ret

000008ec <__fp_cmp>:
 8ec:	99 0f       	add	r25, r25
 8ee:	00 08       	sbc	r0, r0
 8f0:	55 0f       	add	r21, r21
 8f2:	aa 0b       	sbc	r26, r26
 8f4:	e0 e8       	ldi	r30, 0x80	; 128
 8f6:	fe ef       	ldi	r31, 0xFE	; 254
 8f8:	16 16       	cp	r1, r22
 8fa:	17 06       	cpc	r1, r23
 8fc:	e8 07       	cpc	r30, r24
 8fe:	f9 07       	cpc	r31, r25
 900:	c0 f0       	brcs	.+48     	; 0x932 <__fp_cmp+0x46>
 902:	12 16       	cp	r1, r18
 904:	13 06       	cpc	r1, r19
 906:	e4 07       	cpc	r30, r20
 908:	f5 07       	cpc	r31, r21
 90a:	98 f0       	brcs	.+38     	; 0x932 <__fp_cmp+0x46>
 90c:	62 1b       	sub	r22, r18
 90e:	73 0b       	sbc	r23, r19
 910:	84 0b       	sbc	r24, r20
 912:	95 0b       	sbc	r25, r21
 914:	39 f4       	brne	.+14     	; 0x924 <__fp_cmp+0x38>
 916:	0a 26       	eor	r0, r26
 918:	61 f0       	breq	.+24     	; 0x932 <__fp_cmp+0x46>
 91a:	23 2b       	or	r18, r19
 91c:	24 2b       	or	r18, r20
 91e:	25 2b       	or	r18, r21
 920:	21 f4       	brne	.+8      	; 0x92a <__fp_cmp+0x3e>
 922:	08 95       	ret
 924:	0a 26       	eor	r0, r26
 926:	09 f4       	brne	.+2      	; 0x92a <__fp_cmp+0x3e>
 928:	a1 40       	sbci	r26, 0x01	; 1
 92a:	a6 95       	lsr	r26
 92c:	8f ef       	ldi	r24, 0xFF	; 255
 92e:	81 1d       	adc	r24, r1
 930:	81 1d       	adc	r24, r1
 932:	08 95       	ret

00000934 <__fp_inf>:
 934:	97 f9       	bld	r25, 7
 936:	9f 67       	ori	r25, 0x7F	; 127
 938:	80 e8       	ldi	r24, 0x80	; 128
 93a:	70 e0       	ldi	r23, 0x00	; 0
 93c:	60 e0       	ldi	r22, 0x00	; 0
 93e:	08 95       	ret

00000940 <__fp_nan>:
 940:	9f ef       	ldi	r25, 0xFF	; 255
 942:	80 ec       	ldi	r24, 0xC0	; 192
 944:	08 95       	ret

00000946 <__fp_pscA>:
 946:	00 24       	eor	r0, r0
 948:	0a 94       	dec	r0
 94a:	16 16       	cp	r1, r22
 94c:	17 06       	cpc	r1, r23
 94e:	18 06       	cpc	r1, r24
 950:	09 06       	cpc	r0, r25
 952:	08 95       	ret

00000954 <__fp_pscB>:
 954:	00 24       	eor	r0, r0
 956:	0a 94       	dec	r0
 958:	12 16       	cp	r1, r18
 95a:	13 06       	cpc	r1, r19
 95c:	14 06       	cpc	r1, r20
 95e:	05 06       	cpc	r0, r21
 960:	08 95       	ret

00000962 <__fp_round>:
 962:	09 2e       	mov	r0, r25
 964:	03 94       	inc	r0
 966:	00 0c       	add	r0, r0
 968:	11 f4       	brne	.+4      	; 0x96e <__fp_round+0xc>
 96a:	88 23       	and	r24, r24
 96c:	52 f0       	brmi	.+20     	; 0x982 <__fp_round+0x20>
 96e:	bb 0f       	add	r27, r27
 970:	40 f4       	brcc	.+16     	; 0x982 <__fp_round+0x20>
 972:	bf 2b       	or	r27, r31
 974:	11 f4       	brne	.+4      	; 0x97a <__fp_round+0x18>
 976:	60 ff       	sbrs	r22, 0
 978:	04 c0       	rjmp	.+8      	; 0x982 <__fp_round+0x20>
 97a:	6f 5f       	subi	r22, 0xFF	; 255
 97c:	7f 4f       	sbci	r23, 0xFF	; 255
 97e:	8f 4f       	sbci	r24, 0xFF	; 255
 980:	9f 4f       	sbci	r25, 0xFF	; 255
 982:	08 95       	ret

00000984 <__fp_split3>:
 984:	57 fd       	sbrc	r21, 7
 986:	90 58       	subi	r25, 0x80	; 128
 988:	44 0f       	add	r20, r20
 98a:	55 1f       	adc	r21, r21
 98c:	59 f0       	breq	.+22     	; 0x9a4 <__fp_splitA+0x10>
 98e:	5f 3f       	cpi	r21, 0xFF	; 255
 990:	71 f0       	breq	.+28     	; 0x9ae <__fp_splitA+0x1a>
 992:	47 95       	ror	r20

00000994 <__fp_splitA>:
 994:	88 0f       	add	r24, r24
 996:	97 fb       	bst	r25, 7
 998:	99 1f       	adc	r25, r25
 99a:	61 f0       	breq	.+24     	; 0x9b4 <__fp_splitA+0x20>
 99c:	9f 3f       	cpi	r25, 0xFF	; 255
 99e:	79 f0       	breq	.+30     	; 0x9be <__fp_splitA+0x2a>
 9a0:	87 95       	ror	r24
 9a2:	08 95       	ret
 9a4:	12 16       	cp	r1, r18
 9a6:	13 06       	cpc	r1, r19
 9a8:	14 06       	cpc	r1, r20
 9aa:	55 1f       	adc	r21, r21
 9ac:	f2 cf       	rjmp	.-28     	; 0x992 <__fp_split3+0xe>
 9ae:	46 95       	lsr	r20
 9b0:	f1 df       	rcall	.-30     	; 0x994 <__fp_splitA>
 9b2:	08 c0       	rjmp	.+16     	; 0x9c4 <__fp_splitA+0x30>
 9b4:	16 16       	cp	r1, r22
 9b6:	17 06       	cpc	r1, r23
 9b8:	18 06       	cpc	r1, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	f1 cf       	rjmp	.-30     	; 0x9a0 <__fp_splitA+0xc>
 9be:	86 95       	lsr	r24
 9c0:	71 05       	cpc	r23, r1
 9c2:	61 05       	cpc	r22, r1
 9c4:	08 94       	sec
 9c6:	08 95       	ret

000009c8 <__fp_zero>:
 9c8:	e8 94       	clt

000009ca <__fp_szero>:
 9ca:	bb 27       	eor	r27, r27
 9cc:	66 27       	eor	r22, r22
 9ce:	77 27       	eor	r23, r23
 9d0:	cb 01       	movw	r24, r22
 9d2:	97 f9       	bld	r25, 7
 9d4:	08 95       	ret

000009d6 <__gesf2>:
 9d6:	8a df       	rcall	.-236    	; 0x8ec <__fp_cmp>
 9d8:	08 f4       	brcc	.+2      	; 0x9dc <__gesf2+0x6>
 9da:	8f ef       	ldi	r24, 0xFF	; 255
 9dc:	08 95       	ret

000009de <__mulsf3>:
 9de:	0b d0       	rcall	.+22     	; 0x9f6 <__mulsf3x>
 9e0:	c0 cf       	rjmp	.-128    	; 0x962 <__fp_round>
 9e2:	b1 df       	rcall	.-158    	; 0x946 <__fp_pscA>
 9e4:	28 f0       	brcs	.+10     	; 0x9f0 <__mulsf3+0x12>
 9e6:	b6 df       	rcall	.-148    	; 0x954 <__fp_pscB>
 9e8:	18 f0       	brcs	.+6      	; 0x9f0 <__mulsf3+0x12>
 9ea:	95 23       	and	r25, r21
 9ec:	09 f0       	breq	.+2      	; 0x9f0 <__mulsf3+0x12>
 9ee:	a2 cf       	rjmp	.-188    	; 0x934 <__fp_inf>
 9f0:	a7 cf       	rjmp	.-178    	; 0x940 <__fp_nan>
 9f2:	11 24       	eor	r1, r1
 9f4:	ea cf       	rjmp	.-44     	; 0x9ca <__fp_szero>

000009f6 <__mulsf3x>:
 9f6:	c6 df       	rcall	.-116    	; 0x984 <__fp_split3>
 9f8:	a0 f3       	brcs	.-24     	; 0x9e2 <__mulsf3+0x4>

000009fa <__mulsf3_pse>:
 9fa:	95 9f       	mul	r25, r21
 9fc:	d1 f3       	breq	.-12     	; 0x9f2 <__mulsf3+0x14>
 9fe:	95 0f       	add	r25, r21
 a00:	50 e0       	ldi	r21, 0x00	; 0
 a02:	55 1f       	adc	r21, r21
 a04:	62 9f       	mul	r22, r18
 a06:	f0 01       	movw	r30, r0
 a08:	72 9f       	mul	r23, r18
 a0a:	bb 27       	eor	r27, r27
 a0c:	f0 0d       	add	r31, r0
 a0e:	b1 1d       	adc	r27, r1
 a10:	63 9f       	mul	r22, r19
 a12:	aa 27       	eor	r26, r26
 a14:	f0 0d       	add	r31, r0
 a16:	b1 1d       	adc	r27, r1
 a18:	aa 1f       	adc	r26, r26
 a1a:	64 9f       	mul	r22, r20
 a1c:	66 27       	eor	r22, r22
 a1e:	b0 0d       	add	r27, r0
 a20:	a1 1d       	adc	r26, r1
 a22:	66 1f       	adc	r22, r22
 a24:	82 9f       	mul	r24, r18
 a26:	22 27       	eor	r18, r18
 a28:	b0 0d       	add	r27, r0
 a2a:	a1 1d       	adc	r26, r1
 a2c:	62 1f       	adc	r22, r18
 a2e:	73 9f       	mul	r23, r19
 a30:	b0 0d       	add	r27, r0
 a32:	a1 1d       	adc	r26, r1
 a34:	62 1f       	adc	r22, r18
 a36:	83 9f       	mul	r24, r19
 a38:	a0 0d       	add	r26, r0
 a3a:	61 1d       	adc	r22, r1
 a3c:	22 1f       	adc	r18, r18
 a3e:	74 9f       	mul	r23, r20
 a40:	33 27       	eor	r19, r19
 a42:	a0 0d       	add	r26, r0
 a44:	61 1d       	adc	r22, r1
 a46:	23 1f       	adc	r18, r19
 a48:	84 9f       	mul	r24, r20
 a4a:	60 0d       	add	r22, r0
 a4c:	21 1d       	adc	r18, r1
 a4e:	82 2f       	mov	r24, r18
 a50:	76 2f       	mov	r23, r22
 a52:	6a 2f       	mov	r22, r26
 a54:	11 24       	eor	r1, r1
 a56:	9f 57       	subi	r25, 0x7F	; 127
 a58:	50 40       	sbci	r21, 0x00	; 0
 a5a:	8a f0       	brmi	.+34     	; 0xa7e <__mulsf3_pse+0x84>
 a5c:	e1 f0       	breq	.+56     	; 0xa96 <__mulsf3_pse+0x9c>
 a5e:	88 23       	and	r24, r24
 a60:	4a f0       	brmi	.+18     	; 0xa74 <__mulsf3_pse+0x7a>
 a62:	ee 0f       	add	r30, r30
 a64:	ff 1f       	adc	r31, r31
 a66:	bb 1f       	adc	r27, r27
 a68:	66 1f       	adc	r22, r22
 a6a:	77 1f       	adc	r23, r23
 a6c:	88 1f       	adc	r24, r24
 a6e:	91 50       	subi	r25, 0x01	; 1
 a70:	50 40       	sbci	r21, 0x00	; 0
 a72:	a9 f7       	brne	.-22     	; 0xa5e <__mulsf3_pse+0x64>
 a74:	9e 3f       	cpi	r25, 0xFE	; 254
 a76:	51 05       	cpc	r21, r1
 a78:	70 f0       	brcs	.+28     	; 0xa96 <__mulsf3_pse+0x9c>
 a7a:	5c cf       	rjmp	.-328    	; 0x934 <__fp_inf>
 a7c:	a6 cf       	rjmp	.-180    	; 0x9ca <__fp_szero>
 a7e:	5f 3f       	cpi	r21, 0xFF	; 255
 a80:	ec f3       	brlt	.-6      	; 0xa7c <__mulsf3_pse+0x82>
 a82:	98 3e       	cpi	r25, 0xE8	; 232
 a84:	dc f3       	brlt	.-10     	; 0xa7c <__mulsf3_pse+0x82>
 a86:	86 95       	lsr	r24
 a88:	77 95       	ror	r23
 a8a:	67 95       	ror	r22
 a8c:	b7 95       	ror	r27
 a8e:	f7 95       	ror	r31
 a90:	e7 95       	ror	r30
 a92:	9f 5f       	subi	r25, 0xFF	; 255
 a94:	c1 f7       	brne	.-16     	; 0xa86 <__mulsf3_pse+0x8c>
 a96:	fe 2b       	or	r31, r30
 a98:	88 0f       	add	r24, r24
 a9a:	91 1d       	adc	r25, r1
 a9c:	96 95       	lsr	r25
 a9e:	87 95       	ror	r24
 aa0:	97 f9       	bld	r25, 7
 aa2:	08 95       	ret

00000aa4 <__umulhisi3>:
 aa4:	a2 9f       	mul	r26, r18
 aa6:	b0 01       	movw	r22, r0
 aa8:	b3 9f       	mul	r27, r19
 aaa:	c0 01       	movw	r24, r0
 aac:	a3 9f       	mul	r26, r19
 aae:	01 d0       	rcall	.+2      	; 0xab2 <__umulhisi3+0xe>
 ab0:	b2 9f       	mul	r27, r18
 ab2:	70 0d       	add	r23, r0
 ab4:	81 1d       	adc	r24, r1
 ab6:	11 24       	eor	r1, r1
 ab8:	91 1d       	adc	r25, r1
 aba:	08 95       	ret

00000abc <itoa>:
 abc:	fb 01       	movw	r30, r22
 abe:	9f 01       	movw	r18, r30
 ac0:	e8 94       	clt
 ac2:	42 30       	cpi	r20, 0x02	; 2
 ac4:	c4 f0       	brlt	.+48     	; 0xaf6 <itoa+0x3a>
 ac6:	45 32       	cpi	r20, 0x25	; 37
 ac8:	b4 f4       	brge	.+44     	; 0xaf6 <itoa+0x3a>
 aca:	4a 30       	cpi	r20, 0x0A	; 10
 acc:	29 f4       	brne	.+10     	; 0xad8 <itoa+0x1c>
 ace:	97 fb       	bst	r25, 7
 ad0:	1e f4       	brtc	.+6      	; 0xad8 <itoa+0x1c>
 ad2:	90 95       	com	r25
 ad4:	81 95       	neg	r24
 ad6:	9f 4f       	sbci	r25, 0xFF	; 255
 ad8:	64 2f       	mov	r22, r20
 ada:	77 27       	eor	r23, r23
 adc:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__udivmodhi4>
 ae0:	80 5d       	subi	r24, 0xD0	; 208
 ae2:	8a 33       	cpi	r24, 0x3A	; 58
 ae4:	0c f0       	brlt	.+2      	; 0xae8 <itoa+0x2c>
 ae6:	89 5d       	subi	r24, 0xD9	; 217
 ae8:	81 93       	st	Z+, r24
 aea:	cb 01       	movw	r24, r22
 aec:	00 97       	sbiw	r24, 0x00	; 0
 aee:	a1 f7       	brne	.-24     	; 0xad8 <itoa+0x1c>
 af0:	16 f4       	brtc	.+4      	; 0xaf6 <itoa+0x3a>
 af2:	5d e2       	ldi	r21, 0x2D	; 45
 af4:	51 93       	st	Z+, r21
 af6:	10 82       	st	Z, r1
 af8:	c9 01       	movw	r24, r18
 afa:	0c 94 7f 05 	jmp	0xafe	; 0xafe <strrev>

00000afe <strrev>:
 afe:	dc 01       	movw	r26, r24
 b00:	fc 01       	movw	r30, r24
 b02:	67 2f       	mov	r22, r23
 b04:	71 91       	ld	r23, Z+
 b06:	77 23       	and	r23, r23
 b08:	e1 f7       	brne	.-8      	; 0xb02 <strrev+0x4>
 b0a:	32 97       	sbiw	r30, 0x02	; 2
 b0c:	04 c0       	rjmp	.+8      	; 0xb16 <strrev+0x18>
 b0e:	7c 91       	ld	r23, X
 b10:	6d 93       	st	X+, r22
 b12:	70 83       	st	Z, r23
 b14:	62 91       	ld	r22, -Z
 b16:	ae 17       	cp	r26, r30
 b18:	bf 07       	cpc	r27, r31
 b1a:	c8 f3       	brcs	.-14     	; 0xb0e <strrev+0x10>
 b1c:	08 95       	ret

00000b1e <__udivmodhi4>:
 b1e:	aa 1b       	sub	r26, r26
 b20:	bb 1b       	sub	r27, r27
 b22:	51 e1       	ldi	r21, 0x11	; 17
 b24:	07 c0       	rjmp	.+14     	; 0xb34 <__udivmodhi4_ep>

00000b26 <__udivmodhi4_loop>:
 b26:	aa 1f       	adc	r26, r26
 b28:	bb 1f       	adc	r27, r27
 b2a:	a6 17       	cp	r26, r22
 b2c:	b7 07       	cpc	r27, r23
 b2e:	10 f0       	brcs	.+4      	; 0xb34 <__udivmodhi4_ep>
 b30:	a6 1b       	sub	r26, r22
 b32:	b7 0b       	sbc	r27, r23

00000b34 <__udivmodhi4_ep>:
 b34:	88 1f       	adc	r24, r24
 b36:	99 1f       	adc	r25, r25
 b38:	5a 95       	dec	r21
 b3a:	a9 f7       	brne	.-22     	; 0xb26 <__udivmodhi4_loop>
 b3c:	80 95       	com	r24
 b3e:	90 95       	com	r25
 b40:	bc 01       	movw	r22, r24
 b42:	cd 01       	movw	r24, r26
 b44:	08 95       	ret

00000b46 <_exit>:
 b46:	f8 94       	cli

00000b48 <__stop_program>:
 b48:	ff cf       	rjmp	.-2      	; 0xb48 <__stop_program>
